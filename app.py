from kivy.app import App
from kivy.uix.button import Button
from kivy.uix.textinput import TextInput
from kivy.uix.stacklayout import StackLayout
import os

# importing model dependencies
import pickle
import numpy
from music21 import instrument, note, stream, chord, converter, environment, midi
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import LSTM
from keras.layers import Activation
from keras.layers import BatchNormalization as BatchNorm

class MainApp(App):

    def build(self):
       layout = StackLayout()

       self.note = TextInput(text="Enter a note!", size_hint=(1.0, None), height=40)
       button = Button(text="Make Music!", size_hint=(1.0, None), height=40)
       button.bind(on_press=self.make_music)
       self.prediction = TextInput(text="Prediction results!", size_hint=(1.0, None))
       play_button = Button(text="Play", size_hint=(1.0, None), height=40)
       play_button.bind(on_press=self.play_music)

       layout.add_widget(self.note)
       layout.add_widget(button)
       layout.add_widget(self.prediction)
       layout.add_widget(play_button)
       return layout

    def play_music(self, instance):
        mf = midi.MidiFile()
        mf.open('assets/test_output.mid')
        mf.read()
        mf.close()
        s = midi.translate.midiFileToStream(mf)
        sp = midi.realtime.StreamPlayer(s)
        sp.play()

    def make_music(self, instance):
        """ Generate a piano midi file """
        def create_midi(prediction_output):
            """ convert the output from the prediction to notes and create a midi file
                from the notes """
            offset = 0
            output_notes = []

            print('Generating midi...')
            # create note and chord objects based on the values generated by the model
            for pattern in prediction_output:
                # pattern is a chord
                if ('.' in pattern) or pattern.isdigit():
                    notes_in_chord = pattern.split('.')
                    notes = []
                    for current_note in notes_in_chord:
                        new_note = note.Note(int(current_note))
                        new_note.storedInstrument = instrument.Piano()
                        notes.append(new_note)
                    new_chord = chord.Chord(notes)
                    new_chord.offset = offset
                    output_notes.append(new_chord)
                # pattern is a note
                else:
                    new_note = note.Note(pattern)
                    new_note.offset = offset
                    new_note.storedInstrument = instrument.Piano()
                    output_notes.append(new_note)

                # increase offset each iteration so that notes do not stack
                offset += 0.5

            print(output_notes)
            midi_stream = stream.Stream(output_notes)

            print('Writing midi file to disk...')
            midi_stream.write('midi', fp='assets/test_output.mid')
            print('Done.')


        #load the notes used to train the model
        data_path = 'assets/notes'
        with open(data_path, 'rb') as filepath:
            notes = pickle.load(filepath)

        # Get all pitch names
        pitchnames = sorted(set(item for item in notes))
        # Get all pitch names
        n_vocab = len(set(notes))

        network_input, normalized_input = self.prepare_sequences(notes, pitchnames, n_vocab)
        model = self.create_network(normalized_input, n_vocab)
        prediction_output = self.generate_notes(self.note.text, model, network_input, pitchnames, n_vocab)

        print('Prediction output: ', prediction_output)

        create_midi(prediction_output)
        self.prediction.text = ' '.join(prediction_output)

    def prepare_sequences(self, notes, pitchnames, n_vocab):
        """ Prepare the sequences used by the Neural Network """
        # map between notes and integers and back
        note_to_int = dict((note, number) for number, note in enumerate(pitchnames))

        sequence_length = 100
        network_input = []
        output = []
        for i in range(0, len(notes) - sequence_length, 1):
            sequence_in = notes[i:i + sequence_length]
            sequence_out = notes[i + sequence_length]
            network_input.append([note_to_int[char] for char in sequence_in])
            output.append(note_to_int[sequence_out])

        n_patterns = len(network_input)

        # reshape the input into a format compatible with LSTM layers
        normalized_input = numpy.reshape(network_input, (n_patterns, sequence_length, 1))
        # normalize input
        normalized_input = normalized_input / float(n_vocab)

        return (network_input, normalized_input)
    
    def create_network(self, network_input, n_vocab):
        """ create the structure of the neural network """
        model = Sequential()
        model.add(LSTM(512, input_shape=(network_input.shape[1], network_input.shape[2]), recurrent_dropout=0.3, return_sequences=True))
        model.add(LSTM(512, return_sequences=True, recurrent_dropout=0.3,))
        model.add(LSTM(512))
        model.add(BatchNorm())
        model.add(Dropout(0.3))
        model.add(Dense(256))
        model.add(Activation('relu'))
        model.add(BatchNorm())
        model.add(Dropout(0.3))
        model.add(Dense(n_vocab))
        model.add(Activation('softmax'))
        model.compile(loss='categorical_crossentropy', optimizer='rmsprop')

        # Load the weights to each node
        model_path = "assets/model-best.h5"
        model.load_weights(model_path)

        return model

    def generate_notes(self, start_note, model, network_input, pitchnames, n_vocab):
        """ Generate notes from the neural network based on a sequence of notes """
        # pick a random sequence from the input as a starting point for the prediction
        # start = numpy.random.randint(0, len(network_input)-1)

        int_to_note = dict((number, note) for number, note in enumerate(pitchnames))
        start_note_int = 1
        for number, note in int_to_note.items():
            if note == start_note:
                start_note_int = number
                break
        
        pattern = network_input[start_note_int]
        prediction_output = []

        print('Generating notes...')
        for note_index in range(100):
            prediction_input = numpy.reshape(pattern, (1, len(pattern), 1))
            prediction_input = prediction_input / float(n_vocab)

            prediction = model.predict(prediction_input, verbose=0)

            index = numpy.argmax(prediction)
            result = int_to_note[index]
            prediction_output.append(result)

            pattern.append(index)
            pattern = pattern[1:len(pattern)]

        print('Done.')
        return prediction_output

if __name__ == '__main__':
    app = MainApp()
    app.run()